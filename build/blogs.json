{"status":"ok","feed":{"url":"https://medium.com/feed/@UtkarshKore","title":"Stories by UtkarshKore on Medium","link":"https://medium.com/@utkarshkore?source=rss-70a6adde20da------2","author":"","description":"Stories by UtkarshKore on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*-2rZCQgj_O0blgGwiMkPOA.jpeg"},"items":[{"title":"Implement Search Functionality with ElasticSearch, Firebase &amp; Flutter","pubDate":"2020-12-06 18:06:53","link":"https://utkarshkore.medium.com/implement-search-functionality-with-elasticsearch-firebase-flutter-1cc36ac9a0f3?source=rss-70a6adde20da------2","guid":"https://medium.com/p/1cc36ac9a0f3","author":"UtkarshKore","thumbnail":"","description":"\n<h4>Let\u2019s see how we can implement full-text search using ElasticSearch and Firestore.</h4>\n<p>Modern applications often require search functionality especially when apps have more textual content which cannot be presented to user in a single screen. The motivation of this article mainly comes from implementing search feature when using <strong>Firestore</strong>. Firebase doesn\u2019t support <em>String.contains() queries which can search for substrings inside text.\u00a0But,</em></p>\n<blockquote>We\u2019re programmers, we solve problems.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fXVxbZ7bEbPpaWvM\"><figcaption>Photo by <a href=\"https://unsplash.com/@laughayette?utm_source=medium&amp;utm_medium=referral\">Marten Newhall</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>What this article\u00a0covers:</p>\n<ol>\n<li>Setup ElasticSearch &amp; Kibana\u00a0locally</li>\n<li>Basics of ElasticSearch (indexes)</li>\n<li>Use SearchDelegates in Flutter with\u00a0Elastic.</li>\n</ol>\n<h3>1. Setup ElasticSearch &amp; Kibana\u00a0Locally</h3>\n<p>You probably would have heard about <em>ElasticSearch </em>but what is <strong>Kibana</strong>? It\u2019s just a visualization tool to easily work with your Elastic data. Let\u2019s get to the steps now. First download the zip files for <a href=\"https://www.elastic.co/downloads/elasticsearch\">elastic </a>and <a href=\"https://www.elastic.co/downloads/kibana\">kibana </a>and unzip it inside your desired\u00a0folder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hjSKuwQCrH7VmK3f6V21QQ.png\"><figcaption>UnzippedFolderView.dart</figcaption></figure><p>Now, let\u2019s just verify that our elastic search works. Open command prompt and navigate to elasticsearch/bin folder. Type <strong>elasticsearch.bat </strong>and hit\u00a0enter.</p>\n<p>At first, it will take some time to setup everything. Once it is done hit your browser with <a href=\"http://localhost:9200/\">http://localhost:9200/</a> address. You should see something like this\u00a0\u2014</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/761/1*UjGmMZ3BSi8JMpNX3cCA2g.png\"><figcaption>Elasticsearch Working</figcaption></figure><p>Now that our elasticsearch is working, we can load kibana to visualize our data. Steps are same. Just navigate to unzipped kibana/bin folder and type <strong>kibana.bat in </strong>cmd. Then in your browser enter this address\u200a\u2014\u200a<a href=\"http://localhost:5601/\">http://localhost:5601/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*h6uHlUptPfVHkZz3LRwLPQ.png\"><figcaption>Kibana Home\u00a0Page</figcaption></figure><p>\ud83c\udf89 Congrats, you\u2019ve setup elasticsearch successfully.</p>\n<h3>2. Basics of Elasticsearch</h3>\n<p>First things first, elasticsearch stores data in an <strong>index. </strong>You can imagine it as a document. An index can have multiple types as a value. e.g. A <strong>Computer </strong>index can have <strong>Desktop </strong>and <strong>Laptop </strong>as their types. We communicate with elasticsearch with http\u00a0methods.</p>\n<ol>\n<li>GET\u200a\u2014\u200aGet search results from\u00a0elastic</li>\n<li>POST &amp; PUT\u200a\u2014\u200aCreate or update\u00a0data</li>\n<li>DELETE\u200a\u2014\u200aDelete index or specific data in\u00a0index</li>\n</ol>\n<p>It\u2019s time to play with Kibana\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xJ-jlwbHnw6N3atN\"><figcaption>Photo by <a href=\"https://unsplash.com/@zacharykadolph?utm_source=medium&amp;utm_medium=referral\">Zachary Kadolph</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Head over to kibana and navigate to <strong>DevTools </strong>under Management. You\u2019ll see an editor with some predefined http methods. We\u2019ll create an index named <strong>services </strong>with some data to practice elasticsearch.</p>\n<ol><li>First, create a new index <strong>services </strong>with <strong>PUT. </strong>The syntax is very simple. We first define the http method we want to use (PUT in this case) followed by the relevant endpoint on which we want to perform the operation. Type this line inside the editor to create the index and click the play button to execute the query. This will create <strong>services\u00a0</strong>index.</li></ol>\n<blockquote>PUT /services</blockquote>\n<p>2. Let\u2019s add some data to this index to query later. We use <strong>POST </strong>method to add data. This will create a unique id for each of the\u00a0doc.</p>\n<blockquote>POST /services/_doc<br>{<br> \u201csearch_query\u201d: \u201ccar services\u201d,<br> \u201cservice_name\u201d: \u201cCar Services\u201d,<br>}</blockquote>\n<p><em>_doc </em>is the type of data in the index. Anything inside {} will be stored as a key-value data. For simplicity, I\u2019m only including the name of the service and a special field <em>search_query </em>(We will see the reason behind this later). You can modify the fields according to your need. Once done, hit run and execute the query. This will add the data with auto generated id. If you want to specify your own id for the doc, simply add it to the relative path after _doc/ like\u00a0this.</p>\n<blockquote>POST /services/_doc/&lt;your-id&gt;<br>{<br> \u201csearch_query\u201d: \u201ccar services\u201d,<br> \u201cservice_name\u201d: \u201cCar Services\u201d,<br>}</blockquote>\n<p>3. To get all the data, use <strong>GET</strong> method on /_search endpoint. Upon executing the below query you\u2019ll see all your data inside <strong>_source </strong>attribute.</p>\n<blockquote>GET /services/_search</blockquote>\n<p>4. To delete a specific index or specific doc with id, you\u2019d use DELETE method as\u00a0below,</p>\n<blockquote>DELETE /test</blockquote>\n<blockquote>DELETE /test/_doc/&lt;doc-id&gt;</blockquote>\n<p>5. To search data with query, we again have to use GET method with /_search endpoint. It also takes a body in which we\u2019ll send the query to match. Let\u2019s take an example below for our <em>services\u00a0</em>index.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/857/1*bNFoX_ggDOw1IZnxcg6AgA.png\"><figcaption>elastic query to search services with \u201c<strong>ca</strong>\u201d in\u00a0name</figcaption></figure><p>As you can see, it takes a nested query JSON. The <strong>default_field</strong> indicates that the query has to be performed on [this] field. That\u2019s why we included <em>search_query </em>field so that we can search names using lowercase letters for better results. And when you get the results back, you can use <em>service_name </em>field to populate it in the\u00a0UI.</p>\n<p>The query is passed in the <strong>query </strong>field which is a simple RegEx in our case which matched every string that contains letters <strong>ca. </strong>Feel free to modify this query according to your needs. Once you execute this, elasticsearch will return all the matching\u00a0data.</p>\n<p>Now that we\u2019ve what we need to perform search, let\u2019s move to flutter side and see how to communicate with this data. Most of you might have already guessed the need of http connection, so we\u2019ll use <a href=\"https://pub.dev/packages/dio/install\">dio </a>package. The code looks like below\u00a0\u2014</p>\n<a href=\"https://medium.com/media/cbfff1bb306731738912327cbf1eff58/href\">https://medium.com/media/cbfff1bb306731738912327cbf1eff58/href</a><p>If you try to run this code now, it won\u2019t run as the elastic is serving on localhost and cannot be accessed on real device/emulator. Hence we\u2019ve to make it run on public IP. It\u2019s\u00a0simple.</p>\n<ol>\n<li>Close the current instance of elastic and navigate to the unzipped elastic/config folder and open elasticsearch.yml file inside\u00a0editor.</li>\n<li>Find <strong>network.host:192.168.0.1 </strong>line and uncomment it. Change it to <em>network.host: 0.0.0.0. This will automatically assign a public\u00a0address.</em>\n</li>\n<li>Also, uncomment the <strong>discovery.seed_hosts: [\u201chost1\u201d, \u201chost2\u201d] </strong>line and change it to empty list<strong> discovery.seed_hosts: []</strong>\n</li>\n<li>Save your file and exit. Now run your elasticsearch again (Hopefully you remember the\u00a0steps).</li>\n<li>You should see publish_address in your command prompt which is the actual IP address we\u2019ll use for communication in Flutter. Copy this address with port number and paste it into <strong>ELASTIC_BASE_URL </strong>variable. Make sure your device and PC are on same\u00a0network.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*55rJx5qHdqaHAOwh9-dxPw.png\"><figcaption>public IP\u00a0address</figcaption></figure><p>If you make the request now, you can see the the response in print() statement. It\u2019s just a matter of showing the results in the UI now. We\u2019ll use SearchDelegates to populate the result on\u00a0search.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*C8Pk9tU2PKqN6SQCWfvXjw.png\"><figcaption>Terminologies in Search\u00a0Delegate</figcaption></figure><p>SearchDelegate provides predefined methods to implement the modern search functionality.</p>\n<ul>\n<li>\n<strong>buildActions\u200a</strong>\u2014\u200areturns list of actions to be taken like clear, search,\u00a0etc.</li>\n<li>\n<strong>buildLeading\u200a</strong>\u2014\u200abuilds the leading widget like back button in most\u00a0cases.</li>\n<li>\n<strong>buildResults\u200a</strong>\u2014\u200abuilds the results when the search action is performed(ListView in most\u00a0cases).</li>\n<li>\n<strong>buildSuggestions\u200a</strong>\u2014\u200abuilds suggestions while user is typing in the textfield. Build your suggestions list\u00a0here.</li>\n</ul>\n<p>SearchDelegate also has a <strong>query </strong>field which contains the latest text user has typed. You can use this field to pass it to the searchServices() method. The code would look like\u00a0this,</p>\n<a href=\"https://medium.com/media/7efa7dd5169dcb387b3816b50736fc1c/href\">https://medium.com/media/7efa7dd5169dcb387b3816b50736fc1c/href</a><p>Wherever you want to open this search delegate just call showSearch() method provided by material.dart.</p>\n<blockquote>showSearch(context: context, delegate: ServiceSearchDelegate());</blockquote>\n<p>That\u2019s it. This is what it takes to integrate ElasticSearch with flutter. This isn\u2019t enough though. You\u2019ll have to host your elastic to cloud platforms like GCP to use it remotely. You can do this with Firebase cloud functions. Refer the video <a href=\"https://youtu.be/fC_8aMtyBBw\">here</a>. The basic idea is to host elastic on cloud and add the new data with cloud functions when new data is added to firebase. For the sake of simplicity we\u2019ll end the article\u00a0here.</p>\n<p>If you still want written article post it in the response. I\u2019ll work on that. Hope you understood the basics of ElasticSearch and liked the\u00a0article.</p>\n<p>Happy Coding!</p>\n<p><a href=\"https://www.linkedin.com/in/utkarsh-kore-175080174/\">Utkarsh Kore - Application Developer at Outshade - Outshade Digital Media | LinkedIn</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1cc36ac9a0f3\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>Let\u2019s see how we can implement full-text search using ElasticSearch and Firestore.</h4>\n<p>Modern applications often require search functionality especially when apps have more textual content which cannot be presented to user in a single screen. The motivation of this article mainly comes from implementing search feature when using <strong>Firestore</strong>. Firebase doesn\u2019t support <em>String.contains() queries which can search for substrings inside text.\u00a0But,</em></p>\n<blockquote>We\u2019re programmers, we solve problems.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fXVxbZ7bEbPpaWvM\"><figcaption>Photo by <a href=\"https://unsplash.com/@laughayette?utm_source=medium&amp;utm_medium=referral\">Marten Newhall</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>What this article\u00a0covers:</p>\n<ol>\n<li>Setup ElasticSearch &amp; Kibana\u00a0locally</li>\n<li>Basics of ElasticSearch (indexes)</li>\n<li>Use SearchDelegates in Flutter with\u00a0Elastic.</li>\n</ol>\n<h3>1. Setup ElasticSearch &amp; Kibana\u00a0Locally</h3>\n<p>You probably would have heard about <em>ElasticSearch </em>but what is <strong>Kibana</strong>? It\u2019s just a visualization tool to easily work with your Elastic data. Let\u2019s get to the steps now. First download the zip files for <a href=\"https://www.elastic.co/downloads/elasticsearch\">elastic </a>and <a href=\"https://www.elastic.co/downloads/kibana\">kibana </a>and unzip it inside your desired\u00a0folder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hjSKuwQCrH7VmK3f6V21QQ.png\"><figcaption>UnzippedFolderView.dart</figcaption></figure><p>Now, let\u2019s just verify that our elastic search works. Open command prompt and navigate to elasticsearch/bin folder. Type <strong>elasticsearch.bat </strong>and hit\u00a0enter.</p>\n<p>At first, it will take some time to setup everything. Once it is done hit your browser with <a href=\"http://localhost:9200/\">http://localhost:9200/</a> address. You should see something like this\u00a0\u2014</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/761/1*UjGmMZ3BSi8JMpNX3cCA2g.png\"><figcaption>Elasticsearch Working</figcaption></figure><p>Now that our elasticsearch is working, we can load kibana to visualize our data. Steps are same. Just navigate to unzipped kibana/bin folder and type <strong>kibana.bat in </strong>cmd. Then in your browser enter this address\u200a\u2014\u200a<a href=\"http://localhost:5601/\">http://localhost:5601/</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*h6uHlUptPfVHkZz3LRwLPQ.png\"><figcaption>Kibana Home\u00a0Page</figcaption></figure><p>\ud83c\udf89 Congrats, you\u2019ve setup elasticsearch successfully.</p>\n<h3>2. Basics of Elasticsearch</h3>\n<p>First things first, elasticsearch stores data in an <strong>index. </strong>You can imagine it as a document. An index can have multiple types as a value. e.g. A <strong>Computer </strong>index can have <strong>Desktop </strong>and <strong>Laptop </strong>as their types. We communicate with elasticsearch with http\u00a0methods.</p>\n<ol>\n<li>GET\u200a\u2014\u200aGet search results from\u00a0elastic</li>\n<li>POST &amp; PUT\u200a\u2014\u200aCreate or update\u00a0data</li>\n<li>DELETE\u200a\u2014\u200aDelete index or specific data in\u00a0index</li>\n</ol>\n<p>It\u2019s time to play with Kibana\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xJ-jlwbHnw6N3atN\"><figcaption>Photo by <a href=\"https://unsplash.com/@zacharykadolph?utm_source=medium&amp;utm_medium=referral\">Zachary Kadolph</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Head over to kibana and navigate to <strong>DevTools </strong>under Management. You\u2019ll see an editor with some predefined http methods. We\u2019ll create an index named <strong>services </strong>with some data to practice elasticsearch.</p>\n<ol><li>First, create a new index <strong>services </strong>with <strong>PUT. </strong>The syntax is very simple. We first define the http method we want to use (PUT in this case) followed by the relevant endpoint on which we want to perform the operation. Type this line inside the editor to create the index and click the play button to execute the query. This will create <strong>services\u00a0</strong>index.</li></ol>\n<blockquote>PUT /services</blockquote>\n<p>2. Let\u2019s add some data to this index to query later. We use <strong>POST </strong>method to add data. This will create a unique id for each of the\u00a0doc.</p>\n<blockquote>POST /services/_doc<br>{<br> \u201csearch_query\u201d: \u201ccar services\u201d,<br> \u201cservice_name\u201d: \u201cCar Services\u201d,<br>}</blockquote>\n<p><em>_doc </em>is the type of data in the index. Anything inside {} will be stored as a key-value data. For simplicity, I\u2019m only including the name of the service and a special field <em>search_query </em>(We will see the reason behind this later). You can modify the fields according to your need. Once done, hit run and execute the query. This will add the data with auto generated id. If you want to specify your own id for the doc, simply add it to the relative path after _doc/ like\u00a0this.</p>\n<blockquote>POST /services/_doc/&lt;your-id&gt;<br>{<br> \u201csearch_query\u201d: \u201ccar services\u201d,<br> \u201cservice_name\u201d: \u201cCar Services\u201d,<br>}</blockquote>\n<p>3. To get all the data, use <strong>GET</strong> method on /_search endpoint. Upon executing the below query you\u2019ll see all your data inside <strong>_source </strong>attribute.</p>\n<blockquote>GET /services/_search</blockquote>\n<p>4. To delete a specific index or specific doc with id, you\u2019d use DELETE method as\u00a0below,</p>\n<blockquote>DELETE /test</blockquote>\n<blockquote>DELETE /test/_doc/&lt;doc-id&gt;</blockquote>\n<p>5. To search data with query, we again have to use GET method with /_search endpoint. It also takes a body in which we\u2019ll send the query to match. Let\u2019s take an example below for our <em>services\u00a0</em>index.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/857/1*bNFoX_ggDOw1IZnxcg6AgA.png\"><figcaption>elastic query to search services with \u201c<strong>ca</strong>\u201d in\u00a0name</figcaption></figure><p>As you can see, it takes a nested query JSON. The <strong>default_field</strong> indicates that the query has to be performed on [this] field. That\u2019s why we included <em>search_query </em>field so that we can search names using lowercase letters for better results. And when you get the results back, you can use <em>service_name </em>field to populate it in the\u00a0UI.</p>\n<p>The query is passed in the <strong>query </strong>field which is a simple RegEx in our case which matched every string that contains letters <strong>ca. </strong>Feel free to modify this query according to your needs. Once you execute this, elasticsearch will return all the matching\u00a0data.</p>\n<p>Now that we\u2019ve what we need to perform search, let\u2019s move to flutter side and see how to communicate with this data. Most of you might have already guessed the need of http connection, so we\u2019ll use <a href=\"https://pub.dev/packages/dio/install\">dio </a>package. The code looks like below\u00a0\u2014</p>\n<a href=\"https://medium.com/media/cbfff1bb306731738912327cbf1eff58/href\">https://medium.com/media/cbfff1bb306731738912327cbf1eff58/href</a><p>If you try to run this code now, it won\u2019t run as the elastic is serving on localhost and cannot be accessed on real device/emulator. Hence we\u2019ve to make it run on public IP. It\u2019s\u00a0simple.</p>\n<ol>\n<li>Close the current instance of elastic and navigate to the unzipped elastic/config folder and open elasticsearch.yml file inside\u00a0editor.</li>\n<li>Find <strong>network.host:192.168.0.1 </strong>line and uncomment it. Change it to <em>network.host: 0.0.0.0. This will automatically assign a public\u00a0address.</em>\n</li>\n<li>Also, uncomment the <strong>discovery.seed_hosts: [\u201chost1\u201d, \u201chost2\u201d] </strong>line and change it to empty list<strong> discovery.seed_hosts: []</strong>\n</li>\n<li>Save your file and exit. Now run your elasticsearch again (Hopefully you remember the\u00a0steps).</li>\n<li>You should see publish_address in your command prompt which is the actual IP address we\u2019ll use for communication in Flutter. Copy this address with port number and paste it into <strong>ELASTIC_BASE_URL </strong>variable. Make sure your device and PC are on same\u00a0network.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*55rJx5qHdqaHAOwh9-dxPw.png\"><figcaption>public IP\u00a0address</figcaption></figure><p>If you make the request now, you can see the the response in print() statement. It\u2019s just a matter of showing the results in the UI now. We\u2019ll use SearchDelegates to populate the result on\u00a0search.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*C8Pk9tU2PKqN6SQCWfvXjw.png\"><figcaption>Terminologies in Search\u00a0Delegate</figcaption></figure><p>SearchDelegate provides predefined methods to implement the modern search functionality.</p>\n<ul>\n<li>\n<strong>buildActions\u200a</strong>\u2014\u200areturns list of actions to be taken like clear, search,\u00a0etc.</li>\n<li>\n<strong>buildLeading\u200a</strong>\u2014\u200abuilds the leading widget like back button in most\u00a0cases.</li>\n<li>\n<strong>buildResults\u200a</strong>\u2014\u200abuilds the results when the search action is performed(ListView in most\u00a0cases).</li>\n<li>\n<strong>buildSuggestions\u200a</strong>\u2014\u200abuilds suggestions while user is typing in the textfield. Build your suggestions list\u00a0here.</li>\n</ul>\n<p>SearchDelegate also has a <strong>query </strong>field which contains the latest text user has typed. You can use this field to pass it to the searchServices() method. The code would look like\u00a0this,</p>\n<a href=\"https://medium.com/media/7efa7dd5169dcb387b3816b50736fc1c/href\">https://medium.com/media/7efa7dd5169dcb387b3816b50736fc1c/href</a><p>Wherever you want to open this search delegate just call showSearch() method provided by material.dart.</p>\n<blockquote>showSearch(context: context, delegate: ServiceSearchDelegate());</blockquote>\n<p>That\u2019s it. This is what it takes to integrate ElasticSearch with flutter. This isn\u2019t enough though. You\u2019ll have to host your elastic to cloud platforms like GCP to use it remotely. You can do this with Firebase cloud functions. Refer the video <a href=\"https://youtu.be/fC_8aMtyBBw\">here</a>. The basic idea is to host elastic on cloud and add the new data with cloud functions when new data is added to firebase. For the sake of simplicity we\u2019ll end the article\u00a0here.</p>\n<p>If you still want written article post it in the response. I\u2019ll work on that. Hope you understood the basics of ElasticSearch and liked the\u00a0article.</p>\n<p>Happy Coding!</p>\n<p><a href=\"https://www.linkedin.com/in/utkarsh-kore-175080174/\">Utkarsh Kore - Application Developer at Outshade - Outshade Digital Media | LinkedIn</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1cc36ac9a0f3\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["firebase","flutter","elasticsearch","cloud","dart"]},{"title":"Cache User Data Securely in Flutter with Hive (NoSQL)","pubDate":"2020-11-23 06:02:41","link":"https://utkarshkore.medium.com/cache-user-data-securely-in-flutter-with-hive-nosql-3aea453db18d?source=rss-70a6adde20da------2","guid":"https://medium.com/p/3aea453db18d","author":"UtkarshKore","thumbnail":"","description":"\n<h4>Ever came across a situation to store user data (or access tokens) securely in mobile app? Welcome to\u00a0Hive\u2026</h4>\n<p>We as an Application Developers, always arrive in a situation to cache user preference or access tokens for later usage in APIs. So, let\u2019s take a look at Hive strategy.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h1ouRSt1VrEBmJhm\"><figcaption>Photo by <a href=\"https://unsplash.com/@scohron?utm_source=medium&amp;utm_medium=referral\">Shelby Cohron</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3><strong>* Why Hive and not Shared Preferences?</strong></h3>\n<p>It\u2019s a very generous question as <a href=\"https://pub.dev/packages/shared_preferences\">SharedPreferences</a> is pretty simple and well-known but it doesn\u2019t provide security as such and only works with primitive data types. With Hive, we\u2019ve the ability to store any data within an encrypted box so the data is not accessible outside the app\u2019s context. Also, Hive is written in Dart language purely, which removes the native platform dependency and hence can be used on any platform (Android, iOS, Web). In addition to this, being NoSQL, Hive has a great performance metrics as compared to any other libraries. You can check the graph\u00a0<a href=\"https://pub.dev/packages/hive#benchmark\">here</a>.</p>\n<p><strong>TLDR;</strong></p>\n<ol>\n<li>Better security with EncryptedBox.</li>\n<li>Faster read and\u00a0writes</li>\n<li>Can be used with any platform.</li>\n<li>NoSQL, hence quick and easy to\u00a0use.</li>\n<li>Better Documentation</li>\n<li>Nearly all operations are synchronous.</li>\n<li>Store Custom objects unlike SharedPref which only supports primitive data types. (will get hands on in this\u00a0article)</li>\n</ol>\n<h3>* Hive\u00a0Basics</h3>\n<p>First of all, Hive works in a concept of <strong>Box. </strong>Think of it as a container which will store your content in NoSQL way. Hive Box will store values in key-value pair. Let\u2019s see some simple examples before going advanced.</p>\n<p>Before we begin, add these dependencies in your pubspec.yaml.</p>\n<a href=\"https://medium.com/media/bc24a00d0408319886e139de72c080e7/href\">https://medium.com/media/bc24a00d0408319886e139de72c080e7/href</a><a href=\"https://medium.com/media/4ad2ed0471759753b489361c6f54ec2a/href\">https://medium.com/media/4ad2ed0471759753b489361c6f54ec2a/href</a><p>The first thing we do is to open a box we desire to store/fetch values from. Then use that box same as a Map&lt;&gt;. Simply call put() method to store any values. A simple operation to store one key-value pair and get it\u2019s value from box will take below\u00a0code,</p>\n<a href=\"https://medium.com/media/fb3c4ffb26e6ca0438b0b2cb05a5b8f7/href\">https://medium.com/media/fb3c4ffb26e6ca0438b0b2cb05a5b8f7/href</a><p>Yes, that\u2019s how simple it is to work with Hive and also synchronous. Let\u2019s take a step further and save an access token of user in an encrypted box. We\u2019ll modify the same method to store the token and create a unique secret key to encrypt the box. One problem here is, we also have to store this secret key in secure storage or else it will defeat the purpose. That\u2019s why we\u2019ve included <a href=\"https://pub.dev/packages/flutter_secure_storage\">flutter_secure_storage</a> package. The approach would\u00a0be:</p>\n<ol>\n<li>Generate a secure key from\u00a0Hive.</li>\n<li>Open a new encrypted box with <em>this\u00a0</em>key.</li>\n<li>Put the access token in the box and close\u00a0it.</li>\n<li>And finally, save this secret key to Secure\u00a0storage.</li>\n</ol>\n<p>Following this, our method will look something like\u00a0this,</p>\n<a href=\"https://medium.com/media/6ed9e004bde3b7a290e304cf17259cd7/href\">https://medium.com/media/6ed9e004bde3b7a290e304cf17259cd7/href</a><blockquote>Note\u00a0: FlutterSecureStorage takes only string values. Hence, we\u2019ve used JSON encode to convert the secret key to JSON\u00a0string.</blockquote>\n<p>You might have guessed the steps already to retrieve the token again from Hive box. I\u2019ll leave this as a challenge for you. You can check the code <a href=\"https://gist.github.com/utkarsh-UK/2163dcb185eea7d010c7a07232351e06\"><strong><em>here</em></strong> </a>if you get stuck anywhere.</p>\n<h3>* Hive Type\u00a0Adapters</h3>\n<p>We\u2019ve finally arrived at our aim for this article. Hive has support for custom objects which means you can store your custom class objects (like UserModel class). For this, Hive uses <strong>TypeAdapters </strong>which in a sense tells Hive how to store and parse this custom objects. Hive can generate TypeAdapters for almost any\u00a0class.</p>\n<blockquote>Note: You can also create these classes manually. But it\u2019s\u00a02020.</blockquote>\n<p>Now, let\u2019s take a simple model\u00a0class.</p>\n<a href=\"https://medium.com/media/15b8c006510a5e879b3f7bc5fee81ffc/href\">https://medium.com/media/15b8c006510a5e879b3f7bc5fee81ffc/href</a><p>We\u2019ve to extend this class from HiveObject and annotate class with HiveType. Also annotate class fields with HiveField annotation(Only annotate fields which you want to store in\u00a0Hive).</p>\n<a href=\"https://medium.com/media/057b77ad31a34263c5a86c6def875287/href\">https://medium.com/media/057b77ad31a34263c5a86c6def875287/href</a><p>I\u2019ve not annotated \u201crole\u201d field as I do not wish to store it in Hive. Also, there are some rules when it comes to giving HiveField values.</p>\n<ol>\n<li>Each field should have unique integer\u00a0value.</li>\n<li>If you wish to add any extra properties to the class later, don\u2019t change the values of existing\u00a0fields.</li>\n<li>If you have a property which is another class, then it\u2019s HiveType id should be\u00a0unique.</li>\n</ol>\n<p>After this, your IDE might be yelling at you at line no 3. Don\u2019t worry we\u2019ll solve that error in this step. We have to have a generator class for our model that will actually handle parsing of these fields. That\u2019s why we included hive_generator and build_runner packages in dev_dependencies. Just run this simple command in your terminal under project\u00a0root.</p>\n<blockquote>flutter packages pub run build_runner build</blockquote>\n<p>You will see one file as <strong>&lt;model_name&gt;.g.dart. </strong>This is a generated file which will be used by Hive whenever dealing with this model class.<strong> Don\u2019t edit or update anything in this file manually.</strong></p>\n<p>The only thing remaining now is to register this type adapter with Hive. Put this line in main.dart where we initialized hive\u00a0first.</p>\n<blockquote>await Hive.initFlutter();</blockquote>\n<blockquote>Hive.registerAdapter(CacheUserModelAdapter());</blockquote>\n<h3><strong>* Perform Actual\u00a0Caching</strong></h3>\n<p>Now that we have our TypeAdapter ready, we can store our data. It\u2019s the same as we saw in Hive Basics section. We\u2019ll just initialize our model and put it in the\u00a0box.</p>\n<a href=\"https://medium.com/media/7a5af0931ccd40a356f567346d664e3b/href\">https://medium.com/media/7a5af0931ccd40a356f567346d664e3b/href</a><p>As simple as that. No code difference for storing custom objects. We just had to create our TypeAdapter and booom! You could also store this data in an encrypted box but as I\u2019m not storing any confidential information, it is an overkill for\u00a0me.</p>\n<h3>* More Usecases for\u00a0Hive</h3>\n<p>You can use Hive for almost any data storage but keep in mind that the simplicity lies in NoSQL structure. If you have any relational data think for other packages like sqflite. If you\u2019re building any social media clones like Instagram, you can also store some post feeds as a cache in Hive with TypeAdapters. You can take a look at the hive documentation <a href=\"https://docs.hivedb.dev/#/\">here</a>.</p>\n<p>Hope you\u2019ve learned the usage of Hive with flutter and some caching tips. Any suggestions are welcome in the response or on <a href=\"https://www.linkedin.com/in/utkarsh-kore-175080174/\">LinkedIn</a>.</p>\n<p><strong>Thank You!</strong></p>\n<ul>\n<li><a href=\"https://www.linkedin.com/in/utkarsh-kore-175080174/\">Utkarsh Kore - Application Developer at Outshade - Outshade Digital Media | LinkedIn</a></li>\n<li><a href=\"https://utkarsh-kore.web.app/#/\">Utkarsh Kore - App Developer</a></li>\n<li><a href=\"https://github.com/utkarsh-UK\">utkarsh-UK - Overview</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3aea453db18d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>Ever came across a situation to store user data (or access tokens) securely in mobile app? Welcome to\u00a0Hive\u2026</h4>\n<p>We as an Application Developers, always arrive in a situation to cache user preference or access tokens for later usage in APIs. So, let\u2019s take a look at Hive strategy.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h1ouRSt1VrEBmJhm\"><figcaption>Photo by <a href=\"https://unsplash.com/@scohron?utm_source=medium&amp;utm_medium=referral\">Shelby Cohron</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3><strong>* Why Hive and not Shared Preferences?</strong></h3>\n<p>It\u2019s a very generous question as <a href=\"https://pub.dev/packages/shared_preferences\">SharedPreferences</a> is pretty simple and well-known but it doesn\u2019t provide security as such and only works with primitive data types. With Hive, we\u2019ve the ability to store any data within an encrypted box so the data is not accessible outside the app\u2019s context. Also, Hive is written in Dart language purely, which removes the native platform dependency and hence can be used on any platform (Android, iOS, Web). In addition to this, being NoSQL, Hive has a great performance metrics as compared to any other libraries. You can check the graph\u00a0<a href=\"https://pub.dev/packages/hive#benchmark\">here</a>.</p>\n<p><strong>TLDR;</strong></p>\n<ol>\n<li>Better security with EncryptedBox.</li>\n<li>Faster read and\u00a0writes</li>\n<li>Can be used with any platform.</li>\n<li>NoSQL, hence quick and easy to\u00a0use.</li>\n<li>Better Documentation</li>\n<li>Nearly all operations are synchronous.</li>\n<li>Store Custom objects unlike SharedPref which only supports primitive data types. (will get hands on in this\u00a0article)</li>\n</ol>\n<h3>* Hive\u00a0Basics</h3>\n<p>First of all, Hive works in a concept of <strong>Box. </strong>Think of it as a container which will store your content in NoSQL way. Hive Box will store values in key-value pair. Let\u2019s see some simple examples before going advanced.</p>\n<p>Before we begin, add these dependencies in your pubspec.yaml.</p>\n<a href=\"https://medium.com/media/bc24a00d0408319886e139de72c080e7/href\">https://medium.com/media/bc24a00d0408319886e139de72c080e7/href</a><a href=\"https://medium.com/media/4ad2ed0471759753b489361c6f54ec2a/href\">https://medium.com/media/4ad2ed0471759753b489361c6f54ec2a/href</a><p>The first thing we do is to open a box we desire to store/fetch values from. Then use that box same as a Map&lt;&gt;. Simply call put() method to store any values. A simple operation to store one key-value pair and get it\u2019s value from box will take below\u00a0code,</p>\n<a href=\"https://medium.com/media/fb3c4ffb26e6ca0438b0b2cb05a5b8f7/href\">https://medium.com/media/fb3c4ffb26e6ca0438b0b2cb05a5b8f7/href</a><p>Yes, that\u2019s how simple it is to work with Hive and also synchronous. Let\u2019s take a step further and save an access token of user in an encrypted box. We\u2019ll modify the same method to store the token and create a unique secret key to encrypt the box. One problem here is, we also have to store this secret key in secure storage or else it will defeat the purpose. That\u2019s why we\u2019ve included <a href=\"https://pub.dev/packages/flutter_secure_storage\">flutter_secure_storage</a> package. The approach would\u00a0be:</p>\n<ol>\n<li>Generate a secure key from\u00a0Hive.</li>\n<li>Open a new encrypted box with <em>this\u00a0</em>key.</li>\n<li>Put the access token in the box and close\u00a0it.</li>\n<li>And finally, save this secret key to Secure\u00a0storage.</li>\n</ol>\n<p>Following this, our method will look something like\u00a0this,</p>\n<a href=\"https://medium.com/media/6ed9e004bde3b7a290e304cf17259cd7/href\">https://medium.com/media/6ed9e004bde3b7a290e304cf17259cd7/href</a><blockquote>Note\u00a0: FlutterSecureStorage takes only string values. Hence, we\u2019ve used JSON encode to convert the secret key to JSON\u00a0string.</blockquote>\n<p>You might have guessed the steps already to retrieve the token again from Hive box. I\u2019ll leave this as a challenge for you. You can check the code <a href=\"https://gist.github.com/utkarsh-UK/2163dcb185eea7d010c7a07232351e06\"><strong><em>here</em></strong> </a>if you get stuck anywhere.</p>\n<h3>* Hive Type\u00a0Adapters</h3>\n<p>We\u2019ve finally arrived at our aim for this article. Hive has support for custom objects which means you can store your custom class objects (like UserModel class). For this, Hive uses <strong>TypeAdapters </strong>which in a sense tells Hive how to store and parse this custom objects. Hive can generate TypeAdapters for almost any\u00a0class.</p>\n<blockquote>Note: You can also create these classes manually. But it\u2019s\u00a02020.</blockquote>\n<p>Now, let\u2019s take a simple model\u00a0class.</p>\n<a href=\"https://medium.com/media/15b8c006510a5e879b3f7bc5fee81ffc/href\">https://medium.com/media/15b8c006510a5e879b3f7bc5fee81ffc/href</a><p>We\u2019ve to extend this class from HiveObject and annotate class with HiveType. Also annotate class fields with HiveField annotation(Only annotate fields which you want to store in\u00a0Hive).</p>\n<a href=\"https://medium.com/media/057b77ad31a34263c5a86c6def875287/href\">https://medium.com/media/057b77ad31a34263c5a86c6def875287/href</a><p>I\u2019ve not annotated \u201crole\u201d field as I do not wish to store it in Hive. Also, there are some rules when it comes to giving HiveField values.</p>\n<ol>\n<li>Each field should have unique integer\u00a0value.</li>\n<li>If you wish to add any extra properties to the class later, don\u2019t change the values of existing\u00a0fields.</li>\n<li>If you have a property which is another class, then it\u2019s HiveType id should be\u00a0unique.</li>\n</ol>\n<p>After this, your IDE might be yelling at you at line no 3. Don\u2019t worry we\u2019ll solve that error in this step. We have to have a generator class for our model that will actually handle parsing of these fields. That\u2019s why we included hive_generator and build_runner packages in dev_dependencies. Just run this simple command in your terminal under project\u00a0root.</p>\n<blockquote>flutter packages pub run build_runner build</blockquote>\n<p>You will see one file as <strong>&lt;model_name&gt;.g.dart. </strong>This is a generated file which will be used by Hive whenever dealing with this model class.<strong> Don\u2019t edit or update anything in this file manually.</strong></p>\n<p>The only thing remaining now is to register this type adapter with Hive. Put this line in main.dart where we initialized hive\u00a0first.</p>\n<blockquote>await Hive.initFlutter();</blockquote>\n<blockquote>Hive.registerAdapter(CacheUserModelAdapter());</blockquote>\n<h3><strong>* Perform Actual\u00a0Caching</strong></h3>\n<p>Now that we have our TypeAdapter ready, we can store our data. It\u2019s the same as we saw in Hive Basics section. We\u2019ll just initialize our model and put it in the\u00a0box.</p>\n<a href=\"https://medium.com/media/7a5af0931ccd40a356f567346d664e3b/href\">https://medium.com/media/7a5af0931ccd40a356f567346d664e3b/href</a><p>As simple as that. No code difference for storing custom objects. We just had to create our TypeAdapter and booom! You could also store this data in an encrypted box but as I\u2019m not storing any confidential information, it is an overkill for\u00a0me.</p>\n<h3>* More Usecases for\u00a0Hive</h3>\n<p>You can use Hive for almost any data storage but keep in mind that the simplicity lies in NoSQL structure. If you have any relational data think for other packages like sqflite. If you\u2019re building any social media clones like Instagram, you can also store some post feeds as a cache in Hive with TypeAdapters. You can take a look at the hive documentation <a href=\"https://docs.hivedb.dev/#/\">here</a>.</p>\n<p>Hope you\u2019ve learned the usage of Hive with flutter and some caching tips. Any suggestions are welcome in the response or on <a href=\"https://www.linkedin.com/in/utkarsh-kore-175080174/\">LinkedIn</a>.</p>\n<p><strong>Thank You!</strong></p>\n<ul>\n<li><a href=\"https://www.linkedin.com/in/utkarsh-kore-175080174/\">Utkarsh Kore - Application Developer at Outshade - Outshade Digital Media | LinkedIn</a></li>\n<li><a href=\"https://utkarsh-kore.web.app/#/\">Utkarsh Kore - App Developer</a></li>\n<li><a href=\"https://github.com/utkarsh-UK\">utkarsh-UK - Overview</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3aea453db18d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["flutter-app-development","cache","learning-to-code","mobile-app-development","flutter"]},{"title":"Writing Unit Tests in Flutter with Firebase Firestore","pubDate":"2020-11-19 12:18:42","link":"https://utkarshkore.medium.com/writing-unit-tests-in-flutter-with-firebase-firestore-72f99be85737?source=rss-70a6adde20da------2","guid":"https://medium.com/p/72f99be85737","author":"UtkarshKore","thumbnail":"","description":"\n<h4>In this article, we\u2019ll see how to unit test your precious code with firestore without using any external library for mocking firestore.</h4>\n<h3><strong>Before we\u00a0begin</strong></h3>\n<ul>\n<li>This article doesn\u2019t use any libraries for firestore mocks. We\u2019ll mock it manually to understand how Mockito\u00a0works.</li>\n<li>This article presumes that you\u2019ve a beginner level understanding of Unit Tests in\u00a0Flutter.</li>\n<li>You must know <em>firestore </em>and it\u2019s usage with\u00a0Flutter.</li>\n</ul>\n<p><strong>Enough. Let\u2019s,</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kwrsDZQodhOyghvE\"><figcaption>Photo by <a href=\"https://unsplash.com/@dtopkin1?utm_source=medium&amp;utm_medium=referral\">Dayne Topkin</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>We will be creating mock classes for each of the firestore class. Remember, this article is to demonstrate how to create and use mocks in tests. If this seems very lengthy, you can always use predefined libraries for mocking. Let\u2019s begin by adding dependencies for <a href=\"https://pub.dev/packages/cloud_firestore\">firestore </a>and <a href=\"https://pub.dev/packages/mockito\">mockito</a> packages. I\u2019m assuming you\u2019ve done that\u00a0already.</p>\n<p>Let\u2019s create a mock class for Firestore instance like\u00a0this.</p>\n<pre>class MockFirestore extends Mock implements FirebaseFirestore {}</pre>\n<pre>void main() {<br>  MockFirestore instance;</pre>\n<pre>setUp(() {<br>    instance = MockFirestore();<br>  });<br>}</pre>\n<h4><strong>Get Data from Firestore</strong></h4>\n<p>Initialize the instance in <strong><em>setUp </em></strong><em>method. Let\u2019s define a test that will get data from firestore document. I like to follow </em><strong><em>Arrange-Act-Assert</em></strong><em> paradigm in tests. So, under setUp\u00a0method,</em></p>\n<pre>test('should return data when the call to remote source is successful.', () async {<br><em>// arrange<br></em><br><em>//act<br></em><br><em>//assert<br></em><br>});</pre>\n<p>And my actual method that performs fetching data is as\u00a0follows,</p>\n<pre>Future&lt;UserModel&gt; getData(String userID) async {<br>    Map&lt;String, dynamic&gt; data = <br>(await firestore.collection('users').doc(<em>userID</em>).get()).data();</pre>\n<pre>return UserModel.fromJSON(data);<br>}</pre>\n<p>If you\u2019ve already tried mocking firestore for this case as a beginner, you might have done something like\u00a0this,</p>\n<pre>when(instance.collection('users').doc(senderID).get()).thenAnswer((<em>_</em>) =&gt; null);</pre>\n<p>But you faced an error that \u2018doc\u2019 was called on null. That\u2019s because <strong>firestore.collection(path)</strong> returns a <strong>CollectionReference</strong> type which Mockito doesn\u2019t understand. So, we\u2019ve to tell mockito how to mock that in tests. For\u00a0that,</p>\n<pre>class MockCollectionReference extends Mock implements CollectionReference {}</pre>\n<pre>class MockDocumentReference extends Mock implements DocumentReference {}</pre>\n<pre>class MockDocumentSnapshot extends Mock implements DocumentSnapshot {}</pre>\n<p>Initialize these as we did for Firestore instance. This is how it should look\u00a0now.</p>\n<a href=\"https://medium.com/media/3d37e68ea5079e0d479059c801acd127/href\">https://medium.com/media/3d37e68ea5079e0d479059c801acd127/href</a><p>Now we\u2019ll do the actual magic. In arrange part, we\u2019ll instruct mockito what to return when specific method of Firestore is\u00a0called.</p>\n<pre>when(instance.collection(any)).thenReturn(mockCollectionReference);<br>when(mockCollectionReference.doc(any)).thenReturn(mockDocumentReference);<br>when(mockDocumentReference.get()).thenAnswer((<em>_</em>) async =&gt; mockDocumentSnapshot);<br>when(mockDocumentSnapshot.data()).thenReturn(responseMap);</pre>\n<ol>\n<li>Start by returning <strong>CollectionReference </strong>for <em>collection() </em>method\u00a0call.</li>\n<li>Then when <em>doc() method is called on any CollectionReference, we\u2019ll return mocked </em><strong><em>DocumentReference </em></strong><em>object.</em>\n</li>\n<li>When we encounter a get() method we\u2019ll simply answer a future with mocked <strong>DocumentSnapshot </strong>which actually contains our data. Notice, here we\u2019ve used <strong>thenAnswer() </strong>because doc.get() returns a Future&lt;DocumentSnapshot&gt;.</li>\n<li>Finally, return the desired Map&lt;String, dynamic&gt; when we encounter any call for\u00a0<strong>data()</strong>.</li>\n</ol>\n<p>This is how your final code should look\u00a0like.</p>\n<a href=\"https://medium.com/media/b7765a676659094a6e1b6fc1e851197b/href\">https://medium.com/media/b7765a676659094a6e1b6fc1e851197b/href</a><p>That\u2019s it. You\u2019ve to repeat these steps for other methods also. You can mock Query, Firestore Snapshots or even any other Firebase libraries like Storage, Auth with this approach. You can see the full example with other mocks\u00a0<a href=\"https://gist.github.com/utkarsh-UK/1a1d2c25fad9cbbc19df5c3a26655a82\"><em>here</em></a></p>\n<p>As simple it is, the downside of this method is<strong> lot of boiler plate code</strong> and you may end up in copy pasting lot of lines. But for a start and to understand how mocking works, I\u2019d really recommend this approach. Once you get hands of it, you can move to using external libraries.</p>\n<p>Hope you learned something with this article. See you in next\u00a0article.</p>\n<blockquote>Happy coding\ud83d\ude09</blockquote>\n<ul>\n<li><a href=\"https://github.com/utkarsh-UK\">utkarsh-UK - Overview</a></li>\n<li><a href=\"https://utkarsh-kore.web.app/\">Utkarsh Kore - App Developer</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=72f99be85737\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>In this article, we\u2019ll see how to unit test your precious code with firestore without using any external library for mocking firestore.</h4>\n<h3><strong>Before we\u00a0begin</strong></h3>\n<ul>\n<li>This article doesn\u2019t use any libraries for firestore mocks. We\u2019ll mock it manually to understand how Mockito\u00a0works.</li>\n<li>This article presumes that you\u2019ve a beginner level understanding of Unit Tests in\u00a0Flutter.</li>\n<li>You must know <em>firestore </em>and it\u2019s usage with\u00a0Flutter.</li>\n</ul>\n<p><strong>Enough. Let\u2019s,</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kwrsDZQodhOyghvE\"><figcaption>Photo by <a href=\"https://unsplash.com/@dtopkin1?utm_source=medium&amp;utm_medium=referral\">Dayne Topkin</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>We will be creating mock classes for each of the firestore class. Remember, this article is to demonstrate how to create and use mocks in tests. If this seems very lengthy, you can always use predefined libraries for mocking. Let\u2019s begin by adding dependencies for <a href=\"https://pub.dev/packages/cloud_firestore\">firestore </a>and <a href=\"https://pub.dev/packages/mockito\">mockito</a> packages. I\u2019m assuming you\u2019ve done that\u00a0already.</p>\n<p>Let\u2019s create a mock class for Firestore instance like\u00a0this.</p>\n<pre>class MockFirestore extends Mock implements FirebaseFirestore {}</pre>\n<pre>void main() {<br>  MockFirestore instance;</pre>\n<pre>setUp(() {<br>    instance = MockFirestore();<br>  });<br>}</pre>\n<h4><strong>Get Data from Firestore</strong></h4>\n<p>Initialize the instance in <strong><em>setUp </em></strong><em>method. Let\u2019s define a test that will get data from firestore document. I like to follow </em><strong><em>Arrange-Act-Assert</em></strong><em> paradigm in tests. So, under setUp\u00a0method,</em></p>\n<pre>test('should return data when the call to remote source is successful.', () async {<br><em>// arrange<br></em><br><em>//act<br></em><br><em>//assert<br></em><br>});</pre>\n<p>And my actual method that performs fetching data is as\u00a0follows,</p>\n<pre>Future&lt;UserModel&gt; getData(String userID) async {<br>    Map&lt;String, dynamic&gt; data = <br>(await firestore.collection('users').doc(<em>userID</em>).get()).data();</pre>\n<pre>return UserModel.fromJSON(data);<br>}</pre>\n<p>If you\u2019ve already tried mocking firestore for this case as a beginner, you might have done something like\u00a0this,</p>\n<pre>when(instance.collection('users').doc(senderID).get()).thenAnswer((<em>_</em>) =&gt; null);</pre>\n<p>But you faced an error that \u2018doc\u2019 was called on null. That\u2019s because <strong>firestore.collection(path)</strong> returns a <strong>CollectionReference</strong> type which Mockito doesn\u2019t understand. So, we\u2019ve to tell mockito how to mock that in tests. For\u00a0that,</p>\n<pre>class MockCollectionReference extends Mock implements CollectionReference {}</pre>\n<pre>class MockDocumentReference extends Mock implements DocumentReference {}</pre>\n<pre>class MockDocumentSnapshot extends Mock implements DocumentSnapshot {}</pre>\n<p>Initialize these as we did for Firestore instance. This is how it should look\u00a0now.</p>\n<a href=\"https://medium.com/media/3d37e68ea5079e0d479059c801acd127/href\">https://medium.com/media/3d37e68ea5079e0d479059c801acd127/href</a><p>Now we\u2019ll do the actual magic. In arrange part, we\u2019ll instruct mockito what to return when specific method of Firestore is\u00a0called.</p>\n<pre>when(instance.collection(any)).thenReturn(mockCollectionReference);<br>when(mockCollectionReference.doc(any)).thenReturn(mockDocumentReference);<br>when(mockDocumentReference.get()).thenAnswer((<em>_</em>) async =&gt; mockDocumentSnapshot);<br>when(mockDocumentSnapshot.data()).thenReturn(responseMap);</pre>\n<ol>\n<li>Start by returning <strong>CollectionReference </strong>for <em>collection() </em>method\u00a0call.</li>\n<li>Then when <em>doc() method is called on any CollectionReference, we\u2019ll return mocked </em><strong><em>DocumentReference </em></strong><em>object.</em>\n</li>\n<li>When we encounter a get() method we\u2019ll simply answer a future with mocked <strong>DocumentSnapshot </strong>which actually contains our data. Notice, here we\u2019ve used <strong>thenAnswer() </strong>because doc.get() returns a Future&lt;DocumentSnapshot&gt;.</li>\n<li>Finally, return the desired Map&lt;String, dynamic&gt; when we encounter any call for\u00a0<strong>data()</strong>.</li>\n</ol>\n<p>This is how your final code should look\u00a0like.</p>\n<a href=\"https://medium.com/media/b7765a676659094a6e1b6fc1e851197b/href\">https://medium.com/media/b7765a676659094a6e1b6fc1e851197b/href</a><p>That\u2019s it. You\u2019ve to repeat these steps for other methods also. You can mock Query, Firestore Snapshots or even any other Firebase libraries like Storage, Auth with this approach. You can see the full example with other mocks\u00a0<a href=\"https://gist.github.com/utkarsh-UK/1a1d2c25fad9cbbc19df5c3a26655a82\"><em>here</em></a></p>\n<p>As simple it is, the downside of this method is<strong> lot of boiler plate code</strong> and you may end up in copy pasting lot of lines. But for a start and to understand how mocking works, I\u2019d really recommend this approach. Once you get hands of it, you can move to using external libraries.</p>\n<p>Hope you learned something with this article. See you in next\u00a0article.</p>\n<blockquote>Happy coding\ud83d\ude09</blockquote>\n<ul>\n<li><a href=\"https://github.com/utkarsh-UK\">utkarsh-UK - Overview</a></li>\n<li><a href=\"https://utkarsh-kore.web.app/\">Utkarsh Kore - App Developer</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=72f99be85737\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["firebase","dart","testing","flutter","mockito"]}]}